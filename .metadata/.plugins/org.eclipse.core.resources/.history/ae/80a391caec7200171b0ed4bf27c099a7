package piece;

import java.util.ArrayList;
import java.util.List;

import board.Board;
import common.Position;

public class Piece implements Cloneable{
	protected List<Position> moveOperation = new ArrayList<Position>();
	protected char name;
	protected boolean isOpponent;
	protected boolean isJumper = false;
	
	public Piece(boolean isOpponent){
		this.isOpponent = isOpponent;
	}
	
	protected void setMoveOperation(List<Position> operation,boolean isOpponent){
		moveOperation.clear();
		for(Position op : operation){
			int x = op.getX();
			int y = op.getY();
			if(isOpponent){
				x *= -1;
				y *= -1;
			}
			moveOperation.add(new Position(x,y));
		}
	}
	public List<Position> getMoveOperation(){
		return new ArrayList<Position>(moveOperation);
	}
	public char getName(){
		return name;
	}
	public boolean isOpponent(){
		return isOpponent;
	}
	
	public boolean checkMovable(Operation operation,Piece[][] board,boolean isOpponent){
		if(this.isOpponent != isOpponent)
			return false;

		boolean isStop = false;
		for(Position op : moveOperation){
			int x;
			int y;
			x = operation.getPosition().getX() + op.getX();
			y = operation.getPosition().getY() + op.getY();

			boolean isGet = false;
			if( x >= 0 && y >= 0 && x < Board.BOARD_SIZE && y < Board.BOARD_SIZE ){
				if(op.getX() == 0 && op.getY() == 0)isStop = false;
				if(board[x][y] == null){
					if(board[x][y].isOpponent() == isOpponent){
						isStop = true;
					}
					if(board[x][y].isOpponent() != isOpponent){
						isGet = true;
					}
				}
				if(x == operation.getTarget().getX() && y == operation.getTarget().getY()){
					return !isStop;
				}
				if(isGet){
					isGet = false;
				}
			}
		}
		
		return false;
	}
	@Override
	public Piece clone(){
		try {
			return (Piece)super.clone();
		} catch (CloneNotSupportedException e) {
			e.printStackTrace();
		}
		return null;
	}
}
