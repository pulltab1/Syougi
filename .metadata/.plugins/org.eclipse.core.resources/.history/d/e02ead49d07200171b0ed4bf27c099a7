package AI;

import java.util.List;

import board.Board;
import board.Player;
import common.Position;
import piece.Operation;

public class Nasuo extends Player{

	public Nasuo(boolean isOpponent) {
		super(isOpponent);
		
	}

	@Override
	public void setup() {
	}

	@Override
	public Operation turn(Board board){
/*
		for(int j=0;j<Board.BOARD_SIZE;j++){
			for(int i=0;i<Board.BOARD_SIZE;i++){
				Position position = new Position(i,j);
				Position target;
				if(!isOpponent())target = new Position(i,j+1);
				else target = new Position(i,j-1);
				Operation operation = new Operation(position,target);
				if(board.checkMovable(operation,isOpponent())==true){
					return operation;
				}
			}
		}
*/
		for(int i=0;i<Board.BOARD_SIZE;i++){
			for(int j=0;j<Board.BOARD_SIZE;j++){
				if(board.getBoard()[i][j]!=null){
					List<Position> op = board.getBoard()[i][j].getMoveOperation();
					for(int k=op.size()-1;k>=0;k--){
						int x = op.get(k).getX();
						int y = op.get(k).getY();
						Operation operation = new Operation(new Position(i,j),new Position(i+x,j+y));
						if(!isOpponent()&&x == 0&&y < 0)continue;
						if(isOpponent()&&x == 0&&y > 0)continue;
						if(board.checkMovable(operation,isOpponent())==true){
							return operation;
						}
					}
				}
			}
		}
		System.err.println("‚¤‚²‚¯‚È‚ ‚ ‚ ‚ ‚ ‚ ‚¢");
		return null;
	}

}
